#include "stdafx.h"
#include "vlSaveProject.h"
#include "EarthMatrixFunctions.h"
#include "osgDB/ReadFile"
#include "osgDB/FileNameUtils"
#include "osgUtil/Optimizer"
#include "IViewer3D.h"
#include "ComFun.h"

CvlSaveProject::CvlSaveProject(void)
{
	std::wstring app = x3::a2w(_getClassName());
	Name(GETSTRINGW(app.c_str(), L"Name", L"保存项目"));
	Caption(GETSTRINGW(app.c_str(), L"Caption", L"项目管理"));
	Category(GETSTRINGW(app.c_str(), L"Category", L"主页"));
	Tooltip(GETSTRINGW(app.c_str(), L"Tooltip", L"保存项目"));
	Description(GETSTRINGW(app.c_str(), L"Description", L"保存项目"));
	BitmapName(GETSTRINGW(app.c_str(), L"BitmapName", L"SaveProject")); 

	registerHandlers();
}

CvlSaveProject::~CvlSaveProject(void)
{
}

bool CvlSaveProject::Initialize()
{
	supportsEvent("PROJECTOPEN");
	supportsEvent("PROJECTCHANGED");
	return true;
}

bool CvlSaveProject::UnInitialize()
{
	return true;
}

bool CvlSaveProject::SetBuddy(x3::IObject* val)
{	
	x3::Object<IViewer3D> spViewer3D(val);
	if( !spViewer3D.valid() )
		return false;

	if( m_spBuddy==spViewer3D )
		return true;

	m_spBuddy = spViewer3D;
	if( spViewer3D->getViewer()==nullptr )
		return false;

	Enable(false);

	return true;
}

// IUICommand
bool CvlSaveProject::OnClick()
{
	USES_CONVERSION;
	IUICommand::Enable(false);
	Checked(true);
	
	CString strSaveSuccess(GETSTRINGT(L"Project", _T("SaveSuccess"), _T("保存成功！")));
	SaveProject();
	AfxMessageBox(strSaveSuccess);

	Checked(false);
	IUICommand::Enable(true);
	return true;
}

void CvlSaveProject::SaveProject()
{
	USES_CONVERSION;

	x3::Object<IViewer3D> spViewer3D(m_spBuddy);
	if( !spViewer3D.valid() )
		return;

	rapidxml::xml_document<> doc;

	rapidxml::xml_node<>* root = doc.allocate_node(rapidxml::node_pi,doc.allocate_string("xml version='1.0' encoding='utf-8'"));
	doc.append_node(root);

	rapidxml::xml_node<>* node = doc.allocate_node(rapidxml::node_element,"Config","Information");
	doc.append_node(node);

	//////////////////////////////////////////////////////////////////////////
	rapidxml::xml_node<>* layers = doc.allocate_node(rapidxml::node_element,"Layers",NULL);
	node->append_node(layers);

	CStringArray* aLayers = spViewer3D->GetLayersArray();
	for (int i=0; i < aLayers->GetCount(); i++)
	{
		CString sL = aLayers->GetAt(i);
		layers->append_node(doc.allocate_node(rapidxml::node_element,"Layer",W2A(sL.GetBuffer())));
	}

	//////////////////////////////////////////////////////////////////////////
	rapidxml::xml_node<>* paths = doc.allocate_node(rapidxml::node_element,"Paths",NULL);
	node->append_node(paths);

	CStringArray* aPaths = spViewer3D->GetPathsArray();
	for (int i=0; i < aPaths->GetCount(); i++)
	{
		CString sL = aPaths->GetAt(i);
		paths->append_node(doc.allocate_node(rapidxml::node_element,"Path",W2A(sL.GetBuffer())));
	}

	//////////////////////////////////////////////////////////////////////////
	rapidxml::xml_node<>* settings = doc.allocate_node(rapidxml::node_element,"DisplaySetting",NULL);
	node->append_node(settings);
	std::string sNum = int2str(spViewer3D->GetOSG_MAX_PAGEDLOD());
	settings->append_node(doc.allocate_node(rapidxml::node_element,"OSG_MAX_PAGEDLOD",sNum.c_str()));

	//////////////////////////////////////////////////////////////////////////
	/*rapidxml::xml_node<>* mode = doc.allocate_node(rapidxml::node_element,"mode","screen mode");
	mode->append_attribute(doc.allocate_attribute("fullscreen","false"));
	node->append_node(mode);*/

	CString sPath = spViewer3D->GetProjectFilePath();
	if (sPath.GetLength() == 0)
	{
		CString strError(GETSTRINGT(L"Project", _T("ProjectNotExist"), _T("项目文件不存在，无法保存项目！")));
		AfxMessageBox(strError);
		return;
	}

	std::ofstream out(sPath);
	out << doc;
}

bool CvlSaveProject::OnAnything2(x3::IObject* sender, const std::string& eventKey, const std::string& filename)
{
	if (eventKey == "PROJECTOPEN")
	{
		if (filename.length() > 0)
	{
		Enable(true);
	}
	}
	

	return true;
}